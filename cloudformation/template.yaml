AWSTemplateFormatVersion: '2010-09-09'
Description: Retail Data Pipeline Stack

Resources:

  RetailDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: retail-data-bucket-ha123

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lambda-s3-execution-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3InvokePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - s3:GetObject
                  - s3:PutBucketNotification
                Resource: "*"

  CsvTransformFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: csv-transform-function
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: datapiplines3         # replace with your actual code bucket
        S3Key: lambda/transform_csv.zip # replace with your zip path
      Runtime: python3.9
      Timeout: 60

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CsvTransformFunction.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt RetailDataBucket.Arn

  BucketNotificationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: bucket-notification-handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Runtime: python3.9
      Timeout: 30
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse

          def handler(event, context):
              print("Event:", json.dumps(event))
              s3 = boto3.client('s3')
              props = event['ResourceProperties']
              try:
                  s3.put_bucket_notification_configuration(
                      Bucket=props['Bucket'],
                      NotificationConfiguration={
                          'LambdaFunctionConfigurations': props['NotificationConfiguration']['LambdaFunctionConfigurations']
                      }
                  )
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as e:
                  print("Error:", str(e))
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

  S3BucketNotification:
    Type: Custom::S3BucketNotification
    DependsOn:
      - LambdaInvokePermission
      - CsvTransformFunction
    Properties:
      ServiceToken: !GetAtt BucketNotificationLambda.Arn
      Bucket: !Ref RetailDataBucket
      NotificationConfiguration:
        LambdaFunctionConfigurations:
          - Events:
              - s3:ObjectCreated:*
            LambdaFunctionArn: !GetAtt CsvTransformFunction.Arn
